-- 1
CREATE TABLE archiwum_departamentow (
    id              NUMBER PRIMARY KEY,
    nazwa           VARCHAR2(100),
    data_zamkniecia DATE,
    ostatni_manager VARCHAR2(200)
);

CREATE OR REPLACE TRIGGER trg_archiwum_departamentow
AFTER DELETE ON departments
FOR EACH ROW
DECLARE
    v_manager_name VARCHAR2(200);
BEGIN
    SELECT first_name || ' ' || last_name
    INTO v_manager_name
    FROM employees
    WHERE employee_id = :OLD.manager_id;

    INSERT INTO archiwum_departamentow (
        id,
        nazwa,
        data_zamkniecia,
        ostatni_manager
    ) VALUES (
        :OLD.department_id,
        :OLD.department_name,
        SYSDATE,
        v_manager_name
    );
EXCEPTION
    WHEN NO_DATA_FOUND THEN
        INSERT INTO archiwum_departamentow (
            id,
            nazwa,
            data_zamkniecia,
            ostatni_manager
        ) VALUES (
            :OLD.department_id,
            :OLD.department_name,
            SYSDATE,
            NULL
        );
END;
/

-- 2
CREATE TABLE zlodziej (
    id           NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    uzytkownik   VARCHAR2(100),
    czas_zmiany  TIMESTAMP DEFAULT SYSTIMESTAMP
);

CREATE OR REPLACE TRIGGER trg_salary_check
BEFORE INSERT OR UPDATE ON employees
FOR EACH ROW
DECLARE
    PRAGMA AUTONOMOUS_TRANSACTION;
    v_user VARCHAR2(100);
BEGIN
    IF :NEW.salary < 2000 OR :NEW.salary > 26000 THEN
        SELECT USER INTO v_user FROM dual;

        INSERT INTO zlodziej (uzytkownik)
        VALUES (v_user);
        
        COMMIT;

        RAISE_APPLICATION_ERROR(-20001, 'Wynagrodzenie poza dozwolonym zakresem (2000 - 26000).');
    END IF;
END;
/

-- 3
CREATE SEQUENCE seq_employee_id
START WITH 1
INCREMENT BY 1;

CREATE OR REPLACE TRIGGER trg_employee_autoinc
BEFORE INSERT ON employees
FOR EACH ROW
BEGIN
    IF :NEW.employee_id IS NULL THEN
        SELECT seq_employee_id.NEXTVAL INTO :NEW.employee_id FROM dual;
    END IF;
END;
/


-- 4
CREATE OR REPLACE TRIGGER trg_block_job_grades
BEFORE INSERT OR UPDATE OR DELETE ON JOB_GRADES
FOR EACH ROW
BEGIN
    RAISE_APPLICATION_ERROR(-20002, 'Operacje INSERT, UPDATE i DELETE na tabeli JOB_GRADES sÄ… zabronione.');
END;
/

-- 5
CREATE OR REPLACE TRIGGER trg_ignore_salary_change
BEFORE UPDATE ON jobs
FOR EACH ROW
BEGIN
    :NEW.min_salary := :OLD.min_salary;
    :NEW.max_salary := :OLD.max_salary;
END;
/






